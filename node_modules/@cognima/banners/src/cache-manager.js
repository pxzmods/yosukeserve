"use strict";

/**
 * Módulo de gerenciamento de cache
 * 
 * Este módulo fornece funções para gerenciar o cache do módulo @cognima/banners.
 * 
 * @module cache-manager
 * @author Cognima Team (melhorado)
 * @version 2.0.0
 */

// Cache de imagens
const imageCache = new Map();

// Cache de banners
const bannerCache = new Map();

// Configuração padrão
let config = {
    enabled: true,
    maxImageCacheSize: 50, // Número máximo de imagens em cache
    maxBannerCacheSize: 20, // Número máximo de banners em cache
    ttl: 3600000, // Tempo de vida do cache em milissegundos (1 hora)
    useFingerprinting: true // Se deve usar fingerprinting para identificar itens de cache
};

/**
 * Gera uma chave de cache para uma imagem
 * 
 * @param {string} url - URL da imagem
 * @returns {string} - Chave de cache
 */
function generateImageCacheKey(url) {
    if (!config.useFingerprinting) return url;
    
    // Implementação simplificada de fingerprinting
    const crypto = require('crypto');
    return crypto.createHash('md5').update(url).digest('hex');
}

/**
 * Gera uma chave de cache para um banner
 * 
 * @param {string} type - Tipo do banner
 * @param {Object} options - Opções do banner
 * @returns {string} - Chave de cache
 */
function generateBannerCacheKey(type, options) {
    if (!config.useFingerprinting) return `${type}-${JSON.stringify(options)}`;
    
    // Implementação simplificada de fingerprinting
    const crypto = require('crypto');
    return crypto.createHash('md5').update(`${type}-${JSON.stringify(options)}`).digest('hex');
}

/**
 * Adiciona uma imagem ao cache
 * 
 * @param {string} url - URL da imagem
 * @param {Object} image - Objeto de imagem
 */
function cacheImage(url, image) {
    if (!config.enabled) return;
    
    try {
        // Verifica se o cache está cheio
        if (imageCache.size >= config.maxImageCacheSize) {
            // Remove o item mais antigo
            const oldestKey = imageCache.keys().next().value;
            imageCache.delete(oldestKey);
        }
        
        // Adiciona a imagem ao cache
        const key = generateImageCacheKey(url);
        imageCache.set(key, {
            image,
            timestamp: Date.now()
        });
    } catch (error) {
        console.error('Erro ao adicionar imagem ao cache:', error);
    }
}

/**
 * Obtém uma imagem do cache
 * 
 * @param {string} url - URL da imagem
 * @returns {Object|null} - Objeto de imagem ou null se não estiver em cache
 */
function getCachedImage(url) {
    if (!config.enabled) return null;
    
    try {
        const key = generateImageCacheKey(url);
        
        if (imageCache.has(key)) {
            const cachedItem = imageCache.get(key);
            
            // Verifica se o item expirou
            if (Date.now() - cachedItem.timestamp > config.ttl) {
                imageCache.delete(key);
                return null;
            }
            
            return cachedItem.image;
        }
        
        return null;
    } catch (error) {
        console.error('Erro ao obter imagem do cache:', error);
        return null;
    }
}

/**
 * Adiciona um banner ao cache
 * 
 * @param {string} type - Tipo do banner
 * @param {Object} options - Opções do banner
 * @param {Buffer} buffer - Buffer do banner
 */
function cacheBanner(type, options, buffer) {
    if (!config.enabled) return;
    
    try {
        // Verifica se o cache está cheio
        if (bannerCache.size >= config.maxBannerCacheSize) {
            // Remove o item mais antigo
            const oldestKey = bannerCache.keys().next().value;
            bannerCache.delete(oldestKey);
        }
        
        // Adiciona o banner ao cache
        const key = generateBannerCacheKey(type, options);
        bannerCache.set(key, {
            buffer,
            timestamp: Date.now()
        });
    } catch (error) {
        console.error('Erro ao adicionar banner ao cache:', error);
    }
}

/**
 * Obtém um banner do cache
 * 
 * @param {string} type - Tipo do banner
 * @param {Object} options - Opções do banner
 * @returns {Buffer|null} - Buffer do banner ou null se não estiver em cache
 */
function getCachedBanner(type, options) {
    if (!config.enabled) return null;
    
    try {
        const key = generateBannerCacheKey(type, options);
        
        if (bannerCache.has(key)) {
            const cachedItem = bannerCache.get(key);
            
            // Verifica se o item expirou
            if (Date.now() - cachedItem.timestamp > config.ttl) {
                bannerCache.delete(key);
                return null;
            }
            
            return cachedItem.buffer;
        }
        
        return null;
    } catch (error) {
        console.error('Erro ao obter banner do cache:', error);
        return null;
    }
}

/**
 * Limpa o cache de imagens
 */
function clearImageCache() {
    imageCache.clear();
}

/**
 * Limpa o cache de banners
 */
function clearBannerCache() {
    bannerCache.clear();
}

/**
 * Limpa todo o cache
 */
function clearCache() {
    clearImageCache();
    clearBannerCache();
}

/**
 * Define se o cache está habilitado
 * 
 * @param {boolean} enabled - Se o cache está habilitado
 */
function setEnabled(enabled) {
    config.enabled = enabled;
}

/**
 * Configura as opções de cache
 * 
 * @param {Object} options - Opções de configuração
 * @param {boolean} [options.enabled] - Se o cache está habilitado
 * @param {number} [options.maxImageCacheSize] - Número máximo de imagens em cache
 * @param {number} [options.maxBannerCacheSize] - Número máximo de banners em cache
 * @param {number} [options.ttl] - Tempo de vida do cache em milissegundos
 * @param {boolean} [options.useFingerprinting] - Se deve usar fingerprinting
 */
function configure(options) {
    config = { ...config, ...options };
}

/**
 * Obtém a configuração atual
 * 
 * @returns {Object} - Configuração atual
 */
function getConfig() {
    return { ...config };
}

/**
 * Obtém estatísticas do cache
 * 
 * @returns {Object} - Estatísticas do cache
 */
function getStats() {
    return {
        imageCacheSize: imageCache.size,
        bannerCacheSize: bannerCache.size,
        imageCacheKeys: Array.from(imageCache.keys()),
        bannerCacheKeys: Array.from(bannerCache.keys())
    };
}

module.exports = {
    cacheImage,
    getCachedImage,
    cacheBanner,
    getCachedBanner,
    clearImageCache,
    clearBannerCache,
    clearCache,
    setEnabled,
    configure,
    getConfig,
    getStats
};

